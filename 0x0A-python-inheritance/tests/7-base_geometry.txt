Using BaseGeometry
-------------------
This module is a class, it has two functions, def area(self) and def integer_validator(self, name, value)

========================================
Importing the function from the module
::
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

Checking for a zero value
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	...
ValueError: age must be greater than 0

Check function for negative value
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
	...
ValueError: distance must be greater than 0

Check function for non-int 'value'
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", "12")
Traceback (most recent call last):
	...
TypeError: my_int must be an integer

Check function for one argument missing
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("example",)
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Check function with a float
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("float", 10.3)
Traceback (most recent call last):
	...
TypeError: float must be an integer
