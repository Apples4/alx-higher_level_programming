Using BaseGeometry
-------------------
This module is a class, it has two functions, def area(self) and def integer_validator(self, name, value)

========================================

Importing the function from the module
Checking for module docstring:
>>> m = __import__("7-base_geometry").__doc__
>>> len(m) > 1
True

Checking for class docstring:
>>> c = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(c) > 1
True

Checking for method docstring:
>>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(mod1) > 1
True
>>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(mod2) > 1
True


::
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

Checking for a zero value
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	...
ValueError: age must be greater than 0

Check function for negative value
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
	...
ValueError: distance must be greater than 0

Check function for non-int 'value'
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", "12")
Traceback (most recent call last):
	...
TypeError: my_int must be an integer

Check function for one argument missing
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("example",)
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Checking function with float
::
>>> bg.integer_validator("float", 2.2)
Traceback (most recent call last):
...
TypeError: float must be an integer

Checking function with string value
::
>>> bg.integer_validator("name", "Edward")
Traceback (most recent call last):
...
TypeError: name must be an integer

Checking function with list value
::
>>> bg.integer_validator("name", [1])
Traceback (most recent call last):
...
TypeError: name must be an integer

Checking function with a dict value
::
>>> bg.integer_validator("name", {2,3})
Traceback (most recent call last):
...
TypeError: name must be an integer

Checking function with a missing argu
::
>>> bg.integer_validator("name", (7, ))
Traceback (most recent call last):
...
TypeError: name must be an integer

Checking function with None
::
>>> bg.integer_validator("name", None)
Traceback (most recent call last):
...
TypeError: name must be an integer

Checking function with negative float
::
>>> bg.integer_validator("negative2", -1.2)
Traceback (most recent call last):
...
TypeError: negative2 must be an integer

Checking function with boolean value
::
>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer

Checking function 
::
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

Checking function type
::
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

Printing object
::
>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

Checking function with None
::
>>> bg = BaseGeometry(None)
Traceback (most recent call last):
	...
TypeError: BaseGeometry() takes no arguments

Chekcking methode of class
::
>>> bg = BaseGeometry()
>>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at...>>

Checking function print
::
>>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at...>>

Checking funcion for tulpe
::
>>> bg.integer_validator("invalid tuple", (1,))
Traceback (most recent call last):
	...
TypeError: invalid tuple must be an integer

Checking function with None at value
::
>>> bg.integer_validator("absolutely every possible invalid", None)
Traceback (most recent call last):
	...
TypeError: absolutely every possible invalid must be an integer

Checking function with on argument
::
>>> bg.integer_validator(None) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Checking function fot non list 
::
>>> bg.integer_validator({"a": 1}, (1, 2))
Traceback (most recent call last):
	...
TypeError: {'a': 1} must be an integer
